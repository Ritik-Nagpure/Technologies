ex A = 1, B = [1,3], C = ("ola", "Hallo"), D = 'D' , "hi"
           ***  Elements   ***
==>

_________________________________________________________
            ***  Objects   ***
==>Something which occupy space in memory of application ex
==> 1, [1,3],("ola", "Hallo"), 'D' , "hi"
_________________________________________________________
            ***  Identifiers   ***
==> basically are variable to be more specific it is name of anything like function/class,etc
==> A , B , C , D , <function definition>
_________________________________________________________
            ***  Operators   ***
==> which perform action
+       -       *       **      /       //      %      @
<<      >>      &       |       ^       ~       :=
<       >       <=      >=      ==      !=
_________________________________________________________
            ***  Delimiters   ***
==> have significant roles during writing code
(       )       [       ]       {       }
,       :       .       ;       @       =       ->
+=      -=      *=      /=      //=     %=      @=
&=      |=      ^=      >>=     <<=     **=
'       "       #       \
$       ?       `

_________________________________________________________
            ***  Keywords   ***
==>The following identifiers are used as reserved words, or keywords of the language, and cannot
be used as ordinary identifiers. They must be spelled exactly as written here:
False      await      else       import     pass
None       break      except     in         raise
True       class      finally    is         return
and        continue   for        lambda     try
as         def        from       nonlocal   while
assert     del        global     not        with
async      elif       if         or         yield

==> Some identifiers are only reserved under specific contexts. These are known as soft keywords.
==> match, case and _

_________________________________________________________
            ***  Comments   ***
==> A comment starts with a hash character (# <text>) that is not part of a string literal, and
ends at the end of the physical line.
==> Multiline comment is given by '''<text>''' or """<text>"""

_________________________________________________________
            ***  Blank Lines   ***
==> A logical line that contains only spaces, tabs, formfeeds and possibly a comment,
 is ignored (i.e., no NEWLINE token is generated).

_________________________________________________________
            ***  White Space   ***
==> Except at the beginning of a logical line or in string literals, the whitespace characters space,
 tab and formfeed can be used interchangeably to separate tokens. Whitespace is needed between two
 tokens only if their concatenation could otherwise be interpreted as a different token

_________________________________________________________
            ***  Indentation   ***
==> Leading whitespace (spaces and tabs) at the beginning of a logical line is used to compute the
 indentation levelof the line, which in turn is used to determine the grouping of statements.

_________________________________________________________